/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package FrontEnd;

import BackEnd.Objects.Bet;
import BackEnd.Objects.Gambler;
import BackEnd.Reports.ReportStatus;
import Controller.MainViewController;
import java.awt.HeadlessException;
import javax.swing.DefaultListModel;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jefemayoneso
 */
public class MainView1 extends javax.swing.JFrame {

    private int[] horsePodium;
    private MainViewController controller;
    private int[] newHorsesBet;
    private int counter;

    /**
     * Creates new form MainView1
     */
    public MainView1() {
        initComponents();
        initVars();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelContainer = new javax.swing.JPanel();
        panelMessages = new javax.swing.JPanel();
        labelResult = new javax.swing.JLabel();
        panelContent = new javax.swing.JPanel();
        panelContentBag = new javax.swing.JPanel();
        panelBetsSection = new javax.swing.JPanel();
        panelBetsSectionBag = new javax.swing.JPanel();
        panelBetsTitle = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        panelBetsContent = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        textFieldGamblerNameNewBet = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        textFieldAmmountNewBet = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        comboBoxHorseNumberPosNewBet = new javax.swing.JComboBox<>();
        buttonAddHorseNewBet = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listHorsesNewBet = new javax.swing.JList<>();
        jPanel3 = new javax.swing.JPanel();
        buttonCleanNewBet = new javax.swing.JButton();
        addNewBettButton = new javax.swing.JButton();
        panelEnterResults = new javax.swing.JPanel();
        panelEnterResultBag = new javax.swing.JPanel();
        panelResultTitle = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        panelSelectResults = new javax.swing.JPanel();
        panelSelectHorses = new javax.swing.JPanel();
        panelHorseName = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        comboBoxHorsesName = new javax.swing.JComboBox<>();
        panelHorsePosition = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        comboBoxHorsePosition = new javax.swing.JComboBox<>();
        panelAddPodium = new javax.swing.JPanel();
        buttonAddToPodium = new javax.swing.JButton();
        panelResultBagTable = new javax.swing.JPanel();
        panelHorseResultTable = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableHorsesPostion = new javax.swing.JTable();
        panelTableActionsResults = new javax.swing.JPanel();
        buttonCleanResultList = new javax.swing.JButton();
        buttonProcessResult = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuUploadFile = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        menuItemInsertResults = new javax.swing.JMenuItem();
        menuItemInsertBets = new javax.swing.JMenuItem();
        menuItemBothView = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        menuItemValidateBets = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        menuItemSortBetsByName = new javax.swing.JMenuItem();
        menuItemSortBetByPoints = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelMessages.setLayout(new java.awt.CardLayout());

        labelResult.setText("MENSAJE: ");
        panelMessages.add(labelResult, "card2");

        panelContentBag.setLayout(new java.awt.GridLayout(1, 0));

        panelBetsTitle.setLayout(new java.awt.CardLayout());

        jLabel1.setText("INGRESAR APUESTAS");
        panelBetsTitle.add(jLabel1, "card2");

        jLabel3.setText("Apostador: ");
        jPanel1.add(jLabel3);

        textFieldGamblerNameNewBet.setPreferredSize(new java.awt.Dimension(120, 24));
        jPanel1.add(textFieldGamblerNameNewBet);

        jLabel7.setText("Cantidad");
        jPanel1.add(jLabel7);

        textFieldAmmountNewBet.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        textFieldAmmountNewBet.setPreferredSize(new java.awt.Dimension(120, 24));
        jPanel1.add(textFieldAmmountNewBet);

        jLabel6.setText("Caballos");
        jPanel4.add(jLabel6);

        comboBoxHorseNumberPosNewBet.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Caballo 1", "Caballo 2", "Caballo 3", "Caballo 4", "Caballo 5", "Caballo 6", "Caballo 7", "Caballo 8", "Caballo 9", "Caballo 10" }));
        jPanel4.add(comboBoxHorseNumberPosNewBet);

        buttonAddHorseNewBet.setText("Agregar");
        buttonAddHorseNewBet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddHorseNewBetActionPerformed(evt);
            }
        });
        jPanel4.add(buttonAddHorseNewBet);

        listHorsesNewBet.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(listHorsesNewBet);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        buttonCleanNewBet.setText("LIMPIAR");
        buttonCleanNewBet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCleanNewBetActionPerformed(evt);
            }
        });
        jPanel3.add(buttonCleanNewBet);

        addNewBettButton.setText("Nueva Apuesta");
        addNewBettButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewBettButtonActionPerformed(evt);
            }
        });
        jPanel3.add(addNewBettButton);

        javax.swing.GroupLayout panelBetsContentLayout = new javax.swing.GroupLayout(panelBetsContent);
        panelBetsContent.setLayout(panelBetsContentLayout);
        panelBetsContentLayout.setHorizontalGroup(
            panelBetsContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBetsContentLayout.createSequentialGroup()
                .addGroup(panelBetsContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelBetsContentLayout.createSequentialGroup()
                        .addGroup(panelBetsContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 451, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelBetsContentLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelBetsContentLayout.setVerticalGroup(
            panelBetsContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBetsContentLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout panelBetsSectionBagLayout = new javax.swing.GroupLayout(panelBetsSectionBag);
        panelBetsSectionBag.setLayout(panelBetsSectionBagLayout);
        panelBetsSectionBagLayout.setHorizontalGroup(
            panelBetsSectionBagLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBetsTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelBetsSectionBagLayout.createSequentialGroup()
                .addComponent(panelBetsContent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelBetsSectionBagLayout.setVerticalGroup(
            panelBetsSectionBagLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBetsSectionBagLayout.createSequentialGroup()
                .addComponent(panelBetsTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelBetsContent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelBetsSectionLayout = new javax.swing.GroupLayout(panelBetsSection);
        panelBetsSection.setLayout(panelBetsSectionLayout);
        panelBetsSectionLayout.setHorizontalGroup(
            panelBetsSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBetsSectionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelBetsSectionBag, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelBetsSectionLayout.setVerticalGroup(
            panelBetsSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBetsSectionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelBetsSectionBag, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelContentBag.add(panelBetsSection);

        panelEnterResultBag.setMinimumSize(new java.awt.Dimension(89, 130));

        panelResultTitle.setPreferredSize(new java.awt.Dimension(480, 100));
        panelResultTitle.setLayout(new java.awt.CardLayout());

        jLabel2.setText("RESULTADOS DE LA CARRERA");
        panelResultTitle.add(jLabel2, "card2");

        panelSelectHorses.setLayout(new java.awt.GridLayout(1, 0));

        jLabel4.setText("Caballo");
        panelHorseName.add(jLabel4);

        comboBoxHorsesName.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Caballo 1", "Caballo 2", "Caballo 3", "Caballo 4", "Caballo 5", "Caballo 6", "Caballo 7", "Caballo 8", "Caballo 9", "Caballo 10" }));
        panelHorseName.add(comboBoxHorsesName);

        panelSelectHorses.add(panelHorseName);

        jLabel5.setText("Posicion");
        panelHorsePosition.add(jLabel5);

        comboBoxHorsePosition.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        comboBoxHorsePosition.setMinimumSize(new java.awt.Dimension(109, 24));
        comboBoxHorsePosition.setPreferredSize(new java.awt.Dimension(109, 24));
        panelHorsePosition.add(comboBoxHorsePosition);

        panelSelectHorses.add(panelHorsePosition);

        panelAddPodium.setLayout(new java.awt.CardLayout());

        buttonAddToPodium.setText("AGREGAR");
        buttonAddToPodium.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddToPodiumActionPerformed(evt);
            }
        });
        panelAddPodium.add(buttonAddToPodium, "card2");

        javax.swing.GroupLayout panelSelectResultsLayout = new javax.swing.GroupLayout(panelSelectResults);
        panelSelectResults.setLayout(panelSelectResultsLayout);
        panelSelectResultsLayout.setHorizontalGroup(
            panelSelectResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSelectResultsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelSelectHorses, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelAddPodium, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelSelectResultsLayout.setVerticalGroup(
            panelSelectResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSelectResultsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSelectResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelAddPodium, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelSelectHorses, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        panelResultBagTable.setBackground(new java.awt.Color(0, 0, 255));
        panelResultBagTable.setLayout(new javax.swing.BoxLayout(panelResultBagTable, javax.swing.BoxLayout.PAGE_AXIS));

        tableHorsesPostion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Lugar", "Caballo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableHorsesPostion);

        javax.swing.GroupLayout panelHorseResultTableLayout = new javax.swing.GroupLayout(panelHorseResultTable);
        panelHorseResultTable.setLayout(panelHorseResultTableLayout);
        panelHorseResultTableLayout.setHorizontalGroup(
            panelHorseResultTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHorseResultTableLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelHorseResultTableLayout.setVerticalGroup(
            panelHorseResultTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHorseResultTableLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelResultBagTable.add(panelHorseResultTable);

        buttonCleanResultList.setText("LIMPIAR");
        buttonCleanResultList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCleanResultListActionPerformed(evt);
            }
        });
        panelTableActionsResults.add(buttonCleanResultList);

        buttonProcessResult.setText("PROCESAR");
        buttonProcessResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonProcessResultActionPerformed(evt);
            }
        });
        panelTableActionsResults.add(buttonProcessResult);

        panelResultBagTable.add(panelTableActionsResults);

        javax.swing.GroupLayout panelEnterResultBagLayout = new javax.swing.GroupLayout(panelEnterResultBag);
        panelEnterResultBag.setLayout(panelEnterResultBagLayout);
        panelEnterResultBagLayout.setHorizontalGroup(
            panelEnterResultBagLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelResultTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(panelSelectResults, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelResultBagTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelEnterResultBagLayout.setVerticalGroup(
            panelEnterResultBagLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEnterResultBagLayout.createSequentialGroup()
                .addComponent(panelResultTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelSelectResults, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelResultBagTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout panelEnterResultsLayout = new javax.swing.GroupLayout(panelEnterResults);
        panelEnterResults.setLayout(panelEnterResultsLayout);
        panelEnterResultsLayout.setHorizontalGroup(
            panelEnterResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEnterResultsLayout.createSequentialGroup()
                .addComponent(panelEnterResultBag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelEnterResultsLayout.setVerticalGroup(
            panelEnterResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEnterResultsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelEnterResultBag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelContentBag.add(panelEnterResults);

        javax.swing.GroupLayout panelContentLayout = new javax.swing.GroupLayout(panelContent);
        panelContent.setLayout(panelContentLayout);
        panelContentLayout.setHorizontalGroup(
            panelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelContentBag, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelContentLayout.setVerticalGroup(
            panelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelContentBag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout panelContainerLayout = new javax.swing.GroupLayout(panelContainer);
        panelContainer.setLayout(panelContainerLayout);
        panelContainerLayout.setHorizontalGroup(
            panelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelMessages, javax.swing.GroupLayout.DEFAULT_SIZE, 970, Short.MAX_VALUE)
            .addGroup(panelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelContainerLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelContent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        panelContainerLayout.setVerticalGroup(
            panelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelContainerLayout.createSequentialGroup()
                .addComponent(panelMessages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(330, Short.MAX_VALUE))
            .addGroup(panelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelContainerLayout.createSequentialGroup()
                    .addContainerGap(18, Short.MAX_VALUE)
                    .addComponent(panelContent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(18, Short.MAX_VALUE)))
        );

        jMenu1.setText("Archivo");

        jMenuUploadFile.setText("Leer archivo");
        jMenuUploadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuUploadFileActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuUploadFile);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Vista");

        jMenu3.setText("Vistas");

        menuItemInsertResults.setText("Ingresar resultados");
        menuItemInsertResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemInsertResultsActionPerformed(evt);
            }
        });
        jMenu3.add(menuItemInsertResults);

        menuItemInsertBets.setText("Ingresar apuestas");
        menuItemInsertBets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemInsertBetsActionPerformed(evt);
            }
        });
        jMenu3.add(menuItemInsertBets);

        menuItemBothView.setText("Dividida");
        menuItemBothView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemBothViewActionPerformed(evt);
            }
        });
        jMenu3.add(menuItemBothView);

        jMenu2.add(jMenu3);

        jMenuBar1.add(jMenu2);

        jMenu4.setText("Panel");

        menuItemValidateBets.setText("Validar apuestas");
        menuItemValidateBets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemValidateBetsActionPerformed(evt);
            }
        });
        jMenu4.add(menuItemValidateBets);

        jMenu5.setText("Ordenar apuestas");

        menuItemSortBetsByName.setText("Por nombre");
        menuItemSortBetsByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSortBetsByNameActionPerformed(evt);
            }
        });
        jMenu5.add(menuItemSortBetsByName);

        menuItemSortBetByPoints.setText("Por puntos");
        menuItemSortBetByPoints.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSortBetByPointsActionPerformed(evt);
            }
        });
        jMenu5.add(menuItemSortBetByPoints);

        jMenu4.add(jMenu5);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addNewBettButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewBettButtonActionPerformed
        if (this.textFieldGamblerNameNewBet.getText().isEmpty() || this.textFieldGamblerNameNewBet.getText().isBlank()) {
            JOptionPane.showMessageDialog(null, "No se ha ingresado un nombre de apostador");
        } else if (isNewBetValid()) {
            ReportStatus status = this.controller.insertBet(new Bet(
                    new Gambler(this.textFieldGamblerNameNewBet.getText(), 0),
                    Double.valueOf(this.textFieldAmmountNewBet.getText()),
                    this.newHorsesBet));
            if (status == ReportStatus.SUCCESS) {
                JOptionPane.showMessageDialog(null, "Se ha insertado la nueva apuesta", "APUESTAS", JOptionPane.INFORMATION_MESSAGE);
            } else {
                showMessage(status);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Algun valor ingresado no es valido", "APUESTAS", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addNewBettButtonActionPerformed


    private void menuItemInsertResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemInsertResultsActionPerformed
        this.panelBetsSection.setVisible(false);
        this.panelEnterResults.setVisible(true);
    }//GEN-LAST:event_menuItemInsertResultsActionPerformed

    private void menuItemBothViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemBothViewActionPerformed
        this.panelBetsSection.setVisible(true);
        this.panelEnterResults.setVisible(true);
    }//GEN-LAST:event_menuItemBothViewActionPerformed

    private void menuItemInsertBetsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemInsertBetsActionPerformed
        this.panelBetsSection.setVisible(true);
        this.panelEnterResults.setVisible(false);
    }//GEN-LAST:event_menuItemInsertBetsActionPerformed

    private void buttonAddHorseNewBetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddHorseNewBetActionPerformed
        if (this.comboBoxHorseNumberPosNewBet.getSelectedItem() == null || this.comboBoxHorseNumberPosNewBet.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "Debes seleccionar un caballo");
        } else {
            String tmp = this.comboBoxHorseNumberPosNewBet.getSelectedItem().toString();
            tmp = tmp.substring(tmp.length() - 1, tmp.length());
            int horseNum = Integer.valueOf(tmp) == 0 ? 10 : Integer.valueOf(tmp);
            updateList(horseNum);
            removeItemsNewBetComoboBox();
        }
    }//GEN-LAST:event_buttonAddHorseNewBetActionPerformed

    private void buttonCleanNewBetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCleanNewBetActionPerformed
        this.listHorsesNewBet.setModel(new DefaultListModel());
        this.comboBoxHorseNumberPosNewBet.removeAllItems();
        this.textFieldAmmountNewBet.setText("");
        this.textFieldGamblerNameNewBet.setText("");
        // ADD DATA
        for (int i = 0; i < 10; i++) {
            this.comboBoxHorseNumberPosNewBet.addItem("Caballo " + (i + 1));
        }
        this.counter = 0;
    }//GEN-LAST:event_buttonCleanNewBetActionPerformed

    private void menuItemValidateBetsActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_menuItemValidateBetsActionPerformed
        ReportStatus status = this.controller.validateBets();
        if (status == ReportStatus.SUCCESS) {
            JOptionPane.showMessageDialog(null, "Las apuestas han terminado de ser ordenadas", "VALIDAR", JOptionPane.INFORMATION_MESSAGE);
        } else {
            showMessage(status);
        }
    }// GEN-LAST:event_menuItemValidateBetsActionPerformed

    private void menuItemSortBetsByNameActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_menuItemSortBetsByNameActionPerformed
        ReportStatus status = this.controller.sortBets(ReportStatus.SORT_BY_NAME);
        if (status == ReportStatus.SUCCESS) {
            JOptionPane.showMessageDialog(null, "Se ha terminado de ordenar las apuestas por nombre.", "ORDENAR", JOptionPane.INFORMATION_MESSAGE);
        } else {
            showMessage(status);
        }
    }// GEN-LAST:event_menuItemSortBetsByNameActionPerformed

    private void menuItemSortBetByPointsActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_menuItemSortBetByPointsActionPerformed
        ReportStatus status = this.controller.sortBets(ReportStatus.SORT_BY_POINTS);
        if (status == ReportStatus.SUCCESS) {
            JOptionPane.showMessageDialog(null, "Se ha terminado de ordenar las apuestas por puntuaciones.", "ORDENAR", JOptionPane.INFORMATION_MESSAGE);
        } else {
            showMessage(status);
        }
    }// GEN-LAST:event_menuItemSortBetByPointsActionPerformed

    private void jMenuUploadFileActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuUploadFileActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showDialog(null, "Seleccione el archvio");
        if (result == JFileChooser.APPROVE_OPTION) {
            this.labelResult.setText("FILE: " + fileChooser.getSelectedFile().getAbsolutePath());
            ReportStatus tmp = controller.readFile(fileChooser.getSelectedFile().getAbsolutePath());
            if (tmp == ReportStatus.SUCCESS) {
                JOptionPane.showMessageDialog(null, "Se ha terminado de leer el archivo", "LECTURA DE ARCHIVO",
                        JOptionPane.INFORMATION_MESSAGE);
            } else {
                showMessage(tmp);
            }
        }

    }// GEN-LAST:event_jMenuUploadFileActionPerformed

    private void buttonAddToPodiumActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_buttonAddToPodiumActionPerformed
        if (this.comboBoxHorsesName.getSelectedItem() == null || this.comboBoxHorsePosition.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "Debes seleccionar un caballo y su posiciòn");
        } else {
            String tmp = this.comboBoxHorsePosition.getSelectedItem().toString();
            int horsePos = Integer.valueOf(tmp); // save the position
            tmp = this.comboBoxHorsesName.getSelectedItem().toString();
            tmp = tmp.substring(tmp.length() - 1, tmp.length());
            int horseNum = Integer.valueOf(tmp);
            horseNum = horseNum == 0 ? 10 : horseNum;
            updateTable(horseNum, horsePos);
            removeItemsResultInput();
        }
    }// GEN-LAST:event_buttonAddToPodiumActionPerformed

    private void buttonProcessResultActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_buttonProcessResultActionPerformed
        if (this.tableHorsesPostion.getModel().getRowCount() != 10) {
            JOptionPane.showMessageDialog(null, "No has agregado todas las posiciones de caballo", "PROCES",
                    JOptionPane.INFORMATION_MESSAGE);
        } else {
            try {
                int sorting = Integer.valueOf(JOptionPane.showInputDialog(null, "Elije el tipo de ordenamiento\n1. Ordenar por nombre\n2.Ordenar por puntos", "Ordenamiento", JOptionPane.YES_OPTION));
                ReportStatus sortWith = sorting == 1 ? ReportStatus.SORT_BY_NAME : ReportStatus.SORT_BY_POINTS;
                sorting = Integer.valueOf(JOptionPane.showInputDialog(null, "Elije la forma de ordenamiento\n1. De mayor a menor\n2. De menor a mayor", "Ordenamiento", JOptionPane.YES_OPTION));
                ReportStatus sortBy = sorting == 1 ? ReportStatus.SORT_HIGH_TO_LOW : ReportStatus.SORT_LOW_TO_HIGH;
                // call controller
                ReportStatus status = this.controller.processRace(sortWith, horsePodium);
                if (status == ReportStatus.SUCCESS) {
                    // redirect to new view with results
                    // open a new view with the results
                    RaceResults rr = new RaceResults(this.controller.getBets(), this.controller.getReportManager(), sortBy);
                    rr.setLocationRelativeTo(null);
                    rr.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                    rr.setVisible(true);
                } else {
                    showMessage(status);
                }
            } catch (HeadlessException | NumberFormatException e) {
                showMessage(ReportStatus.UNKNOWN_ACTION);
            }
        }
    }// GEN-LAST:event_buttonProcessResultActionPerformed

    private void buttonCleanResultListActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_buttonCleanResultListActionPerformed
        this.comboBoxHorsePosition.removeAllItems();
        this.comboBoxHorsesName.removeAllItems();
        // RESET table
        DefaultTableModel model = (DefaultTableModel) this.tableHorsesPostion.getModel();
        this.tableHorsesPostion.setModel(model);
        // REST array
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }
        // ADD DATA
        for (int i = 0; i < 10; i++) {
            this.comboBoxHorsesName.addItem("Caballo " + (i + 1));
            this.comboBoxHorsePosition.addItem("" + (i + 1));
        }
    }// GEN-LAST:event_buttonCleanResultListActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNewBettButton;
    private javax.swing.JButton buttonAddHorseNewBet;
    private javax.swing.JButton buttonAddToPodium;
    private javax.swing.JButton buttonCleanNewBet;
    private javax.swing.JButton buttonCleanResultList;
    private javax.swing.JButton buttonProcessResult;
    private javax.swing.JComboBox<String> comboBoxHorseNumberPosNewBet;
    private javax.swing.JComboBox<String> comboBoxHorsePosition;
    private javax.swing.JComboBox<String> comboBoxHorsesName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuUploadFile;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelResult;
    private javax.swing.JList<String> listHorsesNewBet;
    private javax.swing.JMenuItem menuItemBothView;
    private javax.swing.JMenuItem menuItemInsertBets;
    private javax.swing.JMenuItem menuItemInsertResults;
    private javax.swing.JMenuItem menuItemSortBetByPoints;
    private javax.swing.JMenuItem menuItemSortBetsByName;
    private javax.swing.JMenuItem menuItemValidateBets;
    private javax.swing.JPanel panelAddPodium;
    private javax.swing.JPanel panelBetsContent;
    private javax.swing.JPanel panelBetsSection;
    private javax.swing.JPanel panelBetsSectionBag;
    private javax.swing.JPanel panelBetsTitle;
    private javax.swing.JPanel panelContainer;
    private javax.swing.JPanel panelContent;
    private javax.swing.JPanel panelContentBag;
    private javax.swing.JPanel panelEnterResultBag;
    private javax.swing.JPanel panelEnterResults;
    private javax.swing.JPanel panelHorseName;
    private javax.swing.JPanel panelHorsePosition;
    private javax.swing.JPanel panelHorseResultTable;
    private javax.swing.JPanel panelMessages;
    private javax.swing.JPanel panelResultBagTable;
    private javax.swing.JPanel panelResultTitle;
    private javax.swing.JPanel panelSelectHorses;
    private javax.swing.JPanel panelSelectResults;
    private javax.swing.JPanel panelTableActionsResults;
    private javax.swing.JTable tableHorsesPostion;
    private javax.swing.JTextField textFieldAmmountNewBet;
    private javax.swing.JTextField textFieldGamblerNameNewBet;
    // End of variables declaration//GEN-END:variables

    private void initVars() {
        this.horsePodium = new int[10];
        this.controller = new MainViewController();
        this.newHorsesBet = new int[10];
        this.counter = 0;
    }

    private void updateTable(int horseNum, int horsePos) {
        DefaultTableModel defaultModel = (DefaultTableModel) this.tableHorsesPostion.getModel();
        defaultModel.addRow(new Object[]{this.comboBoxHorsePosition.getSelectedItem(),
            this.comboBoxHorsesName.getSelectedItem()});
        this.tableHorsesPostion.setModel(defaultModel);
        // save data to array
        this.horsePodium[horsePos - 1] = horseNum;
    }

    private void removeItemsResultInput() {
        this.comboBoxHorsePosition.removeItemAt(this.comboBoxHorsePosition.getSelectedIndex());
        this.comboBoxHorsesName.removeItemAt(this.comboBoxHorsesName.getSelectedIndex());
    }

    private void removeItemsNewBetComoboBox() {
        this.comboBoxHorseNumberPosNewBet.removeItemAt(this.comboBoxHorseNumberPosNewBet.getSelectedIndex());
    }

    private void showMessage(ReportStatus status) {
        switch (status) {
            case LIST_EMPTY -> {
                JOptionPane.showMessageDialog(null, "No se puede procesar la solicitud, la lista de apuestas está vacia.", "APUESTAS", JOptionPane.INFORMATION_MESSAGE);
            }
            case FAILURE -> {
                JOptionPane.showMessageDialog(null, "Ha ocurrido un error durante la ejecucion del programa", "ERROR", JOptionPane.WARNING_MESSAGE);
            }
            case UNKNOWN_ACTION -> {
                JOptionPane.showMessageDialog(null, "La accion solicitada no es reconocida por el programa", "DESCONOCIDO", JOptionPane.WARNING_MESSAGE);
            }
            case FILE_NOT_FOUND -> {
                JOptionPane.showMessageDialog(null, "El archivo seleccionado no existe", "ARCHIVO", JOptionPane.PLAIN_MESSAGE);
            }
            case SOME_BETS_INVALID -> {
                JOptionPane.showMessageDialog(null, "Se han validado las apuestas pero algunas apuestas han sido invalidas", "APUESTAS", JOptionPane.WARNING_MESSAGE);
            }
            default -> {
                JOptionPane.showMessageDialog(null, "Ha ocurrido un error al intentar procesar la solicitud", "DESCONOCIDO", JOptionPane.ERROR_MESSAGE);
            }
        }

    }

    private void updateList(int horseNum) {
        // remove item from combo box
        try {
            DefaultListModel model = new DefaultListModel();
            this.newHorsesBet[this.counter] = horseNum;
            this.counter++;
            for (int i = 0; i < this.newHorsesBet.length; i++) {
                if (this.newHorsesBet[i] != 0) {
                    model.add(i, (i + 1) + ". Caballo " + this.newHorsesBet[i]);
                }
            }
            this.listHorsesNewBet.setModel(model);
        } catch (Exception e) {
            System.out.println("ERRORÑ " + e.getMessage());
        }

    }

    private boolean isNewBetValid() {
        try {
            int value = Integer.valueOf(this.textFieldAmmountNewBet.getText());
            if (value < 0) {
                return false;
            } else if (this.counter < 10) {
                return false;
            } else if (textFieldGamblerNameNewBet.getText().isEmpty() || this.textFieldGamblerNameNewBet.getText().isBlank()) {
                return false;
            }
            return true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Valor de apuesta no valido");
            return false;
        }
    }
}
